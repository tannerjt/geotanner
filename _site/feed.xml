<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tanner Geo Blog</title>
    <description>Tanner GEO Blog contains guides, snippets, and examples of building applications. I am a science and geo geek, but love programming and building just about anything.
</description>
    <link>http://tannerjt.github.io/geotanner//geotanner/</link>
    <atom:link href="http://tannerjt.github.io/geotanner//geotanner/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 29 Oct 2014 20:31:06 -0700</pubDate>
    <lastBuildDate>Wed, 29 Oct 2014 20:31:06 -0700</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>classybrew: A data classification tool</title>
        <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;Make your map beautiful and statistically relevant&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tannerjt/classybrew&quot;&gt;ClassyBrew&lt;/a&gt; on GitHub&lt;/p&gt;

&lt;p&gt;When creating a choropleth map, there are generally two key questions.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;How do I classify the data? (&lt;em&gt;break up the data&lt;/em&gt;)&lt;/li&gt;
  &lt;li&gt;What color scheme should be used?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Data Classification&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you ever classified data using GIS desktop software or a capable API like &lt;a href=&quot;https://developers.arcgis.com/javascript/jsapi/classbreaksrenderer-amd.html&quot;&gt;Esri’s Javascript API&lt;/a&gt;, you’ve been lucky to have this already solved for you.  A quick selection of an appropriate data classification, such as: equal area, natural breaks, quantile, standard deviation, etc. will provide you with breaks in your data.  Once your data is classified you can define how you want to symbolize your data by color, or select any available color palettes.  You still need to answer the above questions, but all the tools are ready at your disposal.&lt;/p&gt;

&lt;p&gt;My favorite data classification method is called the Jenks Natural Breaks method.  It calculates inherent places to break up your data based on the number of classes you want.  These statistically related numeric ranges are perfect for a when you want a meaningful breakup of you data.  If you are looking for an amazing writeup of the Jenks Natural Breaks, and an algorithm in Python, read the following blog post by Daniel Lewis:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://danieljlewis.org/2010/06/07/jenks-natural-breaks-algorithm-in-python/&quot;&gt;Jenks’ Natural Breaks Algorithm in Python&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I started to break down the algorithim into javascript, until I blindly stumbled &lt;a href=&quot;https://github.com/simogeo/geostats&quot;&gt;geostats&lt;/a&gt;, a comprehensive open source library provided by Simon Georget.  Geostats is a standalone library that provides methods to classify your data using various different methodoligies, including Jenks Natural Breaks.  If you are looking for a multipurpose tool, I would defintely consider incorporating it into your future projects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Color Theory&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What colors best represent your newly classified data?  More often than most, you will be classifying your data because it follows some sequential pattern.  &lt;a href=&quot;http://www.personal.psu.edu/cab38/&quot;&gt;Cynthia Brewer&lt;/a&gt; has spend a good chunk of her career figuring this out for you.  Thank you &lt;a href=&quot;http://www.personal.psu.edu/cab38/&quot;&gt;Cynthia&lt;/a&gt;!  Her research and cartographical background created &lt;a href=&quot;https://github.com/axismaps/colorbrewer&quot;&gt;COLORBREWER&lt;/a&gt;, a visual decision making tool for coloring your map to represent your data.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Problem&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I recently created a map in &lt;a href=&quot;http://leafletjs.com/&quot;&gt;Leaflet&lt;/a&gt; and needed to classify my data (geojson) and assign a color value to each sequential range.  Since there is no inherent ability to render data based on associated values, you will need to do this from scratch.  I found a handy &lt;a href=&quot;http://leafletjs.com/examples/choropleth.html&quot;&gt;chropleth example&lt;/a&gt; on &lt;a href=&quot;http://leafletjs.com/&quot;&gt;Leaflet&lt;/a&gt; that did just that.&lt;/p&gt;

&lt;p&gt;This was accomplished by manually defining your breaks and returning , again a manually assigned color:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;#800026&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
           &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;#BD0026&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
           &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;#E31A1C&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
           &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;#FC4E2A&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
           &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;#FD8D3C&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
           &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;#FEB24C&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
           &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;#FED976&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                      &lt;span class=&quot;s1&quot;&gt;&amp;#39;#FFEDA0&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I’m sure you can see a problem with this method.  If your data changes or you want a new color palette, you have to manually change these values.&lt;/p&gt;

&lt;p&gt;What I needed was an automatic way to do this.  The pseudocode looked like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Define my data series
Define the desired number of classes
Define the color palette based on ColorBrewer
Classify your data using Jenks Method
function getColor(number) {
	return appropriate color
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;The Solution&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using the &lt;a href=&quot;http://danieljlewis.org/2010/06/07/jenks-natural-breaks-algorithm-in-python/&quot;&gt;Jenks’&lt;/a&gt; algorithm and sequential &lt;a href=&quot;https://github.com/axismaps/colorbrewer&quot;&gt;colorbrewer&lt;/a&gt; palette, I created &lt;a href=&quot;https://github.com/tannerjt/classybrew&quot;&gt;classybrew&lt;/a&gt;.  It does exacly what the above pseudocode defines.&lt;/p&gt;

&lt;p&gt;Here is the setup:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;brew&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;classyBrew&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;brew&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setSeries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;30.01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;14.9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;22.71&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;24.96&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;7.17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...]);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;brew&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setNumClasses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;brew&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setColorCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;BuGn&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Oranges, Blues, BuGn, GnBu, ...etc &lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;brew&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we can use the &lt;a href=&quot;http://leafletjs.com/examples/choropleth.html&quot;&gt;Leaflet choropleth example&lt;/a&gt; using the newly automated generator.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;brew&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getColorInRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Everytime we call &lt;strong&gt;getColor&lt;/strong&gt;, we will now have our Jenks’ classified and ColorBrewer approved color representing the provided number.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Yay!!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GitHub Repository&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Feel free to use the JavaScript library, provided here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tannerjt/classybrew&quot;&gt;ClassyBrew&lt;/a&gt; on GitHub &lt;/p&gt;

&lt;p&gt;The library contains a simple example of using the classybrew object, as well as a minified version only &lt;strong&gt;&lt;em&gt;18kb&lt;/em&gt;&lt;/strong&gt; in size. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Considerations&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thank you to the following individuals for helping make this possible:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.personal.psu.edu/cab38/&quot;&gt;Cynthia Brewer&lt;/a&gt; - ColorBrewer&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/simogeo/geostats&quot;&gt;Simon Georget&lt;/a&gt; - GeoStats&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://danieljlewis.org/2010/06/07/jenks-natural-breaks-algorithm-in-python/&quot;&gt;Daniel J. Lewis&lt;/a&gt; - Jenks Natural Breaks Description&lt;/p&gt;

</description>
        <pubDate>Wed, 29 Oct 2014 00:00:00 -0700</pubDate>
        <link>http://tannerjt.github.io/geotanner//geotanner/javascript/color-theory/2014/10/29/classybrew-jenks-heart-colorbrewer.html</link>
        <guid isPermaLink="true">http://tannerjt.github.io/geotanner//geotanner/javascript/color-theory/2014/10/29/classybrew-jenks-heart-colorbrewer.html</guid>
        
        <category>javascript</category>
        
        <category>color-theory</category>
        
        <category>data</category>
        
        
        <category>javascript</category>
        
        <category>color-theory</category>
        
      </item>
    
      <item>
        <title>Setting Up and Installing Jekyll</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; is a site generator (&lt;em&gt;built with &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt;&lt;/em&gt;) for building highly customizable blogs.  &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; is also the core engine behind &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;, which allows users to host static sites directly from your &lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt; repository.  If you have ever used CMS or blogging giants like &lt;a href=&quot;https://wordpress.com/&quot;&gt;wordpress&lt;/a&gt;, and experienced performance or troubleshooting issues, &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; may be a welcome change of pace.  For those wanting a quick ‘plug and play’ platform, you may find &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; a little intimidating at first.  However, once you understand the basic file structure and workflow, you will likely be more than impressed at its’ ease of use.&lt;/p&gt;

&lt;p&gt;To really get the most out of &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt;, you should have (&lt;em&gt;but not required&lt;/em&gt;) a basic understanding of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3schools.com/html/&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.w3schools.com/css/&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://git-scm.com/&quot;&gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This post &lt;strong&gt;is not&lt;/strong&gt; a complete guide on how to create a blog with &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt;, but rather a guide to installing and hosting a blog using &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; on &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub&lt;/a&gt;.  The documentation on &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; is very comprehensive, and should be used to guide you into building a solid blog. &lt;/p&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;
&lt;p&gt;I am using a Mac OSX environment, and although Windows is not officially supported, you can get Windows specific docs &lt;a href=&quot;http://jekyllrb.com/docs/windows/#installation&quot;&gt;here&lt;/a&gt;.  Before installing Jekyll, you will need to already have &lt;a href=&quot;https://www.ruby-lang.org/en/downloads/&quot;&gt;Ruby&lt;/a&gt;, &lt;a href=&quot;http://rubygems.org/pages/download&quot;&gt;RubyGems&lt;/a&gt;, &lt;a href=&quot;http://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt;, and &lt;a href=&quot;http://git-scm.com/&quot;&gt;Git&lt;/a&gt;.  You can check if you already have these installed by using Terminal command line:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;node -v
ruby -v
git --version&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you have &lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;, a package manager for OSX, you can install them easily by typing:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;brew install ruby
brew install node&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once you have installed all of the pre-requirements, installing &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; should be straightfoward using the command:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo gem install jekyll&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can create your new site wherever you like, but I like to organize mine in &lt;strong&gt;Documents/blog&lt;/strong&gt;.  Here you can create multiple blogs and have them in one central location.  The blog does not need to be saved in you &lt;strong&gt;sites&lt;/strong&gt; folder, because you will serve your site locally with its’ own server for testing.  To create your site files, use the following commands (&lt;em&gt;change my-new-blog to your blog’s name&lt;/em&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;mkdir ~/Documents/blog &amp;amp;&amp;amp; cd ~/Documents/blog
jekyll new my-new-blog
cd my-new-blog&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You should now see a &lt;a href=&quot;http://jekyllrb.com/docs/structure/&quot;&gt;Directory Structure&lt;/a&gt; that looks similar to the one below:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;├── _config.yml
├── _drafts
|   ├── begin-with-the-crazy-ideas.textile
|   └── on-simplicity-in-technology.markdown
├── _includes
|   ├── footer.html
|   └── header.html
├── _layouts
|   ├── default.html
|   └── post.html
├── _posts
|   ├── 2007-10-29-why-every-programmer-should-play-nethack.textile
|   └── 2009-04-26-barcamp-boston-4-roundup.textile
├── _data
|   └── members.yml
├── _site
└── index.html&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;serving-your-site-locally&quot;&gt;Serving Your Site Locally&lt;/h3&gt;
&lt;p&gt;You can now use &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt;’s command line interface to &lt;a href=&quot;http://jekyllrb.com/docs/usage/&quot;&gt;build and serve&lt;/a&gt; your changes and generate the static HTML of your site.  When you use &lt;strong&gt;build&lt;/strong&gt;, you are generating your site.  Using &lt;strong&gt;serve&lt;/strong&gt; generates your site, and launches a built-in web server to preview your site locally in your browser.  To do this, you will need to type the following:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;jekyll serve&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once the local web server is deployed, you can go to &lt;a href=&quot;http://localhost:4000&quot;&gt;http://localhost:4000&lt;/a&gt; to view your site.  The site uses a default template provided by &lt;a href=&quot;jekyll&quot;&gt;Jekyll&lt;/a&gt;.  You will need to read through their documentation to learn how to create modify your site and create new entries.&lt;/p&gt;

&lt;h3 id=&quot;deploying-to-github-pages&quot;&gt;Deploying to GitHub Pages&lt;/h3&gt;
&lt;p&gt;With &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;, you can create one user site and unlimited project sites.  For this example, we are going to create a project site to push our blog to.  If you do not already have an existing &lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt; account, you will need to create one.  Once you are logged into your &lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt; account, you will need to create a new &lt;strong&gt;empty&lt;/strong&gt; repository.  We will initialize and create the appropriate branch for our project site to render.  Make sure to keep note of your GitHub URL to add as a remote.  It will look similar to this &lt;strong&gt;https://github.com/tannerjt/geotanner.git&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Since the URL structure will change from root to your repo directory, you need to change the &lt;strong&gt;baseurl&lt;/strong&gt; property in your _config.yml file.  It will need to look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;// for this blog it looks like
// baseurl : &amp;quot;/geotanner&amp;quot;
baseurl : &amp;quot;/repo_name&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Before publishing our site, lets build any changes&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;jekyll build&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We will initialize our git repository and add the required gh-pages branch.  This is the default branch needed for the page to render in &lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt;.  We will also need to add and commit all of our code.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;// Initialize git repo
git init
// Create and checkout branch
git checkout -b gh-pages
// Add and commit code
git add .
git commit -m &amp;quot;Initial Commit&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, in order to push the content to &lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt;, we will add our remote repo to push to:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;// Add remote, well call it github
git remote add github https://github.com/tannerjt/geotanner.git
// Push gh-pages branch to remote
git push github gh-pages&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Now you are done!!&lt;/strong&gt;  Your new site should be live and available at [username].github.io/[reponame]&lt;/p&gt;

&lt;p&gt;If you are like me, nothing ever goes smoothly they first time.  I encourage you to use the links on this page for all of the resources mentioned.  With a little persistance, you will be able to solve any problems you had during the process.&lt;/p&gt;

</description>
        <pubDate>Sun, 26 Oct 2014 00:00:00 -0700</pubDate>
        <link>http://tannerjt.github.io/geotanner//geotanner/jekyll/blog/2014/10/26/Setting-Up-and-Installing-Jekyll.html</link>
        <guid isPermaLink="true">http://tannerjt.github.io/geotanner//geotanner/jekyll/blog/2014/10/26/Setting-Up-and-Installing-Jekyll.html</guid>
        
        <category>jekyll</category>
        
        <category>blog</category>
        
        
        <category>jekyll</category>
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
